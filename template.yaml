---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Application/API powered by API Gateway and Lambda
Resources:
  ServiceApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: ./simple-proxy-api.yaml
      StageName: Prod
      Variables:
        ServiceApiFunction: !Ref ServiceApiFunction

  # LambdaExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         Effect: Allow
  #         Principal:
  #           Service: lambda.amazonaws.com
  #         Action: sts:AssumeRole
  #     Path: "/"
  #     Policies:
  #     - PolicyName: root
  #       PolicyDocument:
  #         Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - logs:CreateLogGroup
  #           - logs:CreateLogStream
  #           - logs:PutLogEvents
  #           Resource: arn:aws:logs:*:*:*

  # LambdaApiGatewayExecutionPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !GetAtt ServiceApiFunction.Arn
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: !Join
  #       - ''
  #       - - 'arn:aws:execute-api:'
  #         - !Ref AWS::Region
  #         - ":"
  #         - !Ref AWS::AccountId
  #         - ":"
  #         - !Ref ServiceApi
  #         - "/*/*"

  ServiceApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda.handler
      MemorySize: 1024
      # Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs10.x
      Timeout: 30
      Policies:
        - Statement:
            [{
                "Effect": "Allow",
                "Action": ["dynamodb:*"],
                "Resource": "*"
            }]
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ServiceApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ServiceApi
            Path: /{proxy+}
            Method: ANY
        

Outputs:
    DeploymentStrategy:
        Description: 'Deployment strategy instruction for the service'
        Value: ez_zdt

    ApiUrl:
        Description: The API URL
        Value: !Sub "https://${ServiceApi}.execute-api.${AWS::Region}.amazonaws.com/"

    LambdaServiceApiLogs:
        Description: "Api Lambda Logs"
        Value: !Sub "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logStream:group=/aws/lambda/${ServiceApiFunction};streamFilter=typeLogStreamPrefix"
    